/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package krpcj.fsw;

import java.io.IOException;
import java.util.Scanner;

import krpc.client.Connection;
import krpc.client.services.KRPC;
import krpcj.fsw.config.Constants;
import krpcj.fsw.data.Telemetry;
import krpcj.fsw.ui.InstrumentPanel;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class App {

    private static final Logger logger = LoggerFactory.getLogger(App.class.getSimpleName());
    public String getGreeting() {
        return "Hello World!";
    }

    public void run() throws Exception {
        logger.info(this.getGreeting());

        Scanner scanner = new Scanner(System.in);
        boolean endProg = false;

        InstrumentPanel instrumentPanel = this.setupInstrumentPanel();
        Telemetry telemetry = new Telemetry();

        // Scan for input continuously until quit
        while (!endProg) {
            logger.info("Scanning...");

            // Skip if no input
            if (!scanner.hasNext()) {
                continue;
            }

            // Skip if input is not an integer
            if (!scanner.hasNextInt()) {
                String input = scanner.next(); // Dequeue whatever character was provided
                logger.info("Disregarding: " + input);
                continue;
            }

            // Fetch integer
            int input = scanner.nextInt();
            logger.info("Input: " + input);
            switch (input) {
            case 0:
                endProg = true;
                logger.info("Program set to end");
                break;
            case 1:
                logger.info("Connecting to KRPC server...");
                // Connection conn = this.connectToServer();
                // KRPC krpc = KRPC.newInstance(conn);
                // logger.info(krpc.getStatus().getVersion());
                break;
            case 2:
                logger.info("Updating telemetry!");
                instrumentPanel.updateTelem();
                break;
            default:
                logger.info("Unrecognized input: " + input);
            }
        }
        logger.info("Closing scanner...");
        scanner.close();
        logger.info("Closing window...");
        instrumentPanel.closeWindow();
        logger.info("Window and scanner closed");
    }

    protected Connection connectToServer() throws Exception {
        try {
            Connection conn = Connection.newInstance(Constants.CLIENT_NAME, Constants.SERVER_IP, Constants.SERVER_RPC_PORT, Constants.SERVER_STREAM_PORT);
            return conn;
        } catch (IOException e) {
            throw new Exception("No suitable KRPC server running! " + e.getMessage(), e);
        } catch (Exception e) {
            throw new Exception ("Unknown issue when connecting to server!" + e.getMessage(), e);
        }
    }

    protected InstrumentPanel setupInstrumentPanel() {
        InstrumentPanel instrumentPanel = new InstrumentPanel();
        return instrumentPanel;
    }
}
