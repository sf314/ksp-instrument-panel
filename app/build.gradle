/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    implementation 'org.slf4j:slf4j-api:2.0.6'
    implementation 'org.slf4j:slf4j-simple:2.0.6' // Better than slf4j-jdk14

    // Declare location of local KRPC install
    implementation files('src/main/resources/krpc-java-0.4.8.jar')

    // KRPC dependencies:
    implementation 'com.google.protobuf:protobuf-java:3.21.12'
    implementation 'org.javatuples:javatuples:1.2'
}

testing {
    suites {
        // Configure the built-in test suite
        test {
            // Use JUnit Jupiter test framework
            useJUnitJupiter('5.9.1')
        }
    }
}

// By default, the Gradle run task executes the app in a child process, which is
// fed an empty input stream. To change this, we enforce that System.in is used
// for the input stream to the child process.
//https://medium.com/@mglover/running-a-command-line-app-from-gradle-62f88b3f14c2
run {
    standardInput = System.in
}

application {
    // Define the main class for the application.
    mainClass = 'krpcj.fsw.App'
}
